<project name="Quicksort" default="help" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Some description...
    </description>

    <target name="help">
        <echo>
        Algorithm Engineering project
        Improving Quicksort in Java

        clean:      Remove all intermediate files and folders
        test:       Run JUnit test cases
        javadoc:    Generate javadoc for production code
        resolve:    Download all dependencies

        ### Execution targets ###
        bench.insertion:    Benchmark the insertion sort implementations
        bench.simple:       Benchmark the simple implementation of Quicksort
        bench.skewed:       Benchmark the skewed implementation of Quicksort
        bench.jre:          Benchmark the JRE implementation from the article; Engineering Java 7's Dual Pivot Quicksort Using MaLiJAn
        bench.dual:         Benchmark the dual pivot quicksort implementation
        bench.merge:        Benchmark the mergesort implementation
        bench.low:          Benchmark all algorithms with low size input
        bench.best:         Benchmark all algorithms with their optimal parameters
        </echo>
    </target>

    <!-- Folder properties -->
    <property name="src.dir" value="src" />
    <property name="test.dir" value="test" />
    <property name="dist.dir" location="dist"/>
    <property name="lib.dir" value="lib" />
    <property name="build.dir" value="build" />
    <property name="resource.dir" value="resource" />
    <property name="javadoc.dir" value="javadoc" />
    <property name="test.output.directory" value="TEST-RESULT"/>

    <!-- Paths used for compilation and run -->
    <path id="lib.path.id">
        <fileset dir="${lib.dir}" />
    </path>

    <path id="run.path.id">
        <path refid="lib.path.id" />
        <path location="${build.dir}" />
    </path>

    <!-- House holding -->
    <target name="clean"
            description="--> Clean everything, remove all .class and lib files">
        <delete dir="${build.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${test.output.directory}"/>
        <delete dir="${javadoc.dir}"/>
    </target>

    <target name="prepare">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${test.output.directory}"/>
        <mkdir dir="${javadoc.dir}"/>
    </target>

    <!-- Ivy dependency management -->
    <target name="resolve"
            description="--> Retrieve dependencies with Ivy">
        <ivy:retrieve/>
    </target>

    <target name="report" depends="resolve"
            description="--> Generates a report of dependencies for Ivy">
        <ivy:report todir="${build.dir}"/>
    </target>

    <!-- Compilation tasks --> <!-- TODO: depends="prepare,resolve", resolve is removed to speed up things-->
    <target name="build.src" depends="prepare"
            description="--> Compile production code source files">
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               debug="on"
               classpathref="lib.path.id"
               includeAntRuntime="false">
        </javac>
    </target>

    <target name="build.test" depends="build.src"
            description="--> Compile test code source files">
        <javac srcdir="${test.dir}"
               destdir="${build.dir}"
               debug="on"
               classpathref="lib.path.id"
               includeAntRuntime="false">
        </javac>
    </target>

    <!-- Resources to be put into their proper place -->
    <target name="copy.resource">
        <copy file="${resource.dir}/log4j.properties" todir="${build.dir}"/>
    </target>

    <!-- Build everything -->
    <target name="build.all"
            depends="build.test,copy.resource"
            description="--> Build everything"/>

    <!-- JUnit testing -->
    <target name="test"  depends="build.all"
            description="--> Run JUnit unit and integration tests">
        <junit printsummary="yes" fork="yes"
               forkmode="once"
               haltonfailure="yes">
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${test.output.directory}">
                <fileset dir="${test.dir}">
                    <include name="**/Test*.java"/>
                </fileset>
            </batchtest>
            <classpath refid="run.path.id"/>
        </junit>
    </target>

    <!-- JavaDoc generation -->
    <target name="javadoc" depends="build.src"
            description="--> Generate javadoc in folder ${javadoc.dir}">
        <javadoc
                source = "1.8"
                packagenames=
                        "org.lunding.*"
                sourcepath="${src.dir}"
                destdir="${javadoc.dir}"
                package="true"
                doctitle="&lt;b&gt;Algorithm Engineering: Quicksort&lt;/b&gt;"
                bottom="Rasmus Lunding Henriksen, Aarhus University, Denmark"
                windowtitle="Quicksort">
            <sourcepath>
                <path location="${src.dir}"/>
            </sourcepath>
            <classpath>
                <path refid="run.path.id"/>
            </classpath>
        </javadoc>
        <echo message="Javadoc is in folder: ${javadoc.dir}."/>
    </target>

    <property name="jmh.jar" location="${lib.dir}/jmh-core-1.17.4.jar"/>
    <property name="jmh-generator-annprocess.jar" location="${lib.dir}/jmh-generator-annprocess-1.17.4.jar"/>
    <property name="joptsimple.jar" location="${lib.dir}/jopt-simple-4.6.jar"/>
    <property name="commonsmath.jar" location="${lib.dir}/commons-math3-3.2.jar"/>


    <target name="build.benchmark" description="Generate the self-contained JAR" depends="build.all">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${dist.dir}/benchmarks.jar" basedir="${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="org.openjdk.jmh.Main"/>
            </manifest>
            <zipfileset src="${jmh.jar}" excludes="**/META-INF/services/**" />
            <zipfileset src="${joptsimple.jar}" />
            <zipfileset src="${commonsmath.jar}" />
        </jar>
    </target>

    <target name="bench.all" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line="-rf text -rff data/all.txt"/>
        </java>
    </target>

    <target name="bench.best" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".Best. -rf text -rff data/best.txt"/>
        </java>
    </target>

    <target name="bench.insertion" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchInsertionSort. -rf text -rff data/BenchInsertionSort.txt"/>
        </java>
    </target>

    <target name="bench.simple" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchSimpleQuicksort. -rf text -rff data/BenchSimpleQuicksort.txt"/>
        </java>
    </target>

    <target name="bench.skewed" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchSkewedQuicksort. -rf text -rff data/BenchSkewedQuicksort.txt"/>
        </java>
    </target>

    <target name="bench.jre" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchJREQuicksort. -rf text -rff data/BenchJREQuicksort.txt"/>
        </java>
    </target>

    <target name="bench.dual" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchDualPivotQuicksort. -rf text -rff data/BenchDualPivotQuicksort.txt"/>
        </java>
    </target>

    <target name="bench.low" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchLowInput. -rf text -rff data/BenchLowInput.txt"/>
        </java>
    </target>

    <target name="bench.merge" depends="build.benchmark">
        <java jar="${dist.dir}/benchmarks.jar"
              fork="true">
            <arg line=".BenchMergesort. -rf text -rff data/BenchMergesort.txt"/>
        </java>
    </target>

    <target name="bench.night">
        <ant target="bench.dual"/>
        <ant target="bench.insertion"/>
        <ant target="bench.jre"/>
        <ant target="bench.low"/>
    </target>



</project>